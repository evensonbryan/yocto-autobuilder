'''
Created on Jan 11, 2013

__author__ = "Elizabeth 'pidge' Flanagan"
__copyright__ = "Copyright 2012-2013, Intel Corp."
__credits__ = ["Elizabeth Flanagan"]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Elizabeth Flanagan"
__email__ = "elizabeth.flanagan@intel.com"
'''

from buildbot.steps.shell import ShellCommand
from twisted.python import log
import os, datetime
from autobuilder.config import *

class PublishArtifacts(ShellCommand):
    """
    Build step to publish artifacts.
    """

    haltOnFailure = False
    flunkOnFailure = True
    name = "Publishing Artifacts"
    def __init__(self, factory, argdict=None, **kwargs):
        """
        argdict contents:
            "artifacts":[string] - list of artifacts
        """
        self.factory = factory
        self.description = "Publishing Artifacts"
        self.workerdir=os.path.join(os.path.join(YOCTO_ABBASE, "yocto-worker"))
        for k, v in argdict.iteritems():
            if type(v) is bool:
                setattr(self, k, str(v))
            else:
                setattr(self, k, v)
        self.timeout = 100000
        kwargs['timeout']=self.timeout
        ShellCommand.__init__(self, **kwargs)

    def start(self):
        layerversion_yoctobsp=1
        DEST=self.getProperty("DEST")
        buildername=self.getProperty("buildername")
        got_revision_poky=self.getProperty("got_revision_poky")
        distroversion=self.getProperty("distroversion")
        self.layerversion_yoctobsp = self.getProperty("layerversion_yoctobsp")
        self.layerversion_yocto = self.getProperty("layerversion_yocto")
        self.layerversion_core = self.getProperty("layerversion_core")
        log.msg(layerversion_yoctobsp)
        self.basedir=os.path.join(os.path.join(
                                    self.workerdir, buildername),
                                    "build/build/")
        command=""
        DATESTAMP=datetime.datetime.now().strftime("%Y%m%d")
        if str(os.environ.get('PUBLISH_BUILDS')) == "True":
            for artifact in self.artifacts:
                if self.layerversion_yoctobsp is not None and int(self.layerversion_yoctobsp) > 1 and artifact == "atom-pc":
                    artifact = "genericx86"
                elif self.layerversion_yoctobsp is not None and int(self.layerversion_yoctobsp) < 2 and artifact == "genericx86":
                    artifact = "atom-pc"
                if self.layerversion_yoctobsp is not None and int(self.layerversion_yoctobsp) < 2 and artifact == "genericx86-64":
                    artifact = "None"

                if self.layerversion_yoctobsp is not None and int(self.layerversion_yoctobsp) > 2 and artifact == "beagleboard":
                    artifact = "beaglebone"
                elif self.layerversion_yoctobsp is not None and int(self.layerversion_yoctobsp) < 3 and artifact == "beaglebone":
                    artifact = "beagleboard"

                if self.layerversion_yoctobsp is not None and int(self.layerversion_yoctobsp) > 2 and artifact == "routerstationpro":
                    artifact = "edgerouter"
                elif self.layerversion_yoctobsp is not None and int(self.layerversion_yoctobsp) < 3 and artifact == "edgerouter":
                    artifact = "routerstationpro"

                if artifact == "adt-installer":
                    command=command+"mkdir -p " + os.path.join(DEST, ADT_INST_PUBLISH_DIR) + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    os.path.join(self.basedir, "tmp/deploy/sdk/") + \
                                    "*adt* " + os.path.join(DEST, ADT_INST_PUBLISH_DIR) + ";"
                elif artifact == "adt-installer-QA":
                    command=command+"mkdir -p " + os.path.join(DEST, ADTQA_INST_PUBLISH_DIR) + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    os.path.join(self.basedir, "tmp/deploy/sdk/") + \
                                    "*adt* " + os.path.join(DEST, ADTQA_INST_PUBLISH_DIR)+ ";"
                elif artifact == "adtrepo-dev":
                    adt_dev_dest= os.environ.get("ADTREPO_DEV_PATH") + "/" + distroversion + "-" + got_revision_poky + '-' + self.getProperty("branch_poky")
                    command=command+"mkdir -p " + adt_dev_dest + "/adt-ipk;"
                    command=command+"rsync -av " + os.path.join(self.basedir, "tmp/deploy/ipk/") + " " +  adt_dev_dest + "/adt-ipk;"
                    command=command+"rm -rf " + adt_dev_dest + "/rootfs; mkdir -p " + adt_dev_dest + "/rootfs;"
                    command=command+"for x in `ls " + DEST + "/machines/qemu/|grep -v tiny`; do ln -s " + DEST + "/machines/qemu/$x " + adt_dev_dest + "/rootfs/$x; done;"
                    if self.layerversion_yocto is not None and int(self.layerversion_yocto) < 2:
                        command=command+"mv " + adt_dev_dest + "/rootfs/qemux86-64 " + adt_dev_dest + "/rootfs/qemux86_64;"
                elif artifact == "eclipse-plugin-juno":
                    command=command+"mkdir -p " + DEST + "/eclipse-plugin/juno;"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                     os.path.join(os.path.join(self.workerdir, buildername),
                                                 "build/scripts/org.*.zip") + \
                                     " " + DEST + "/eclipse-plugin/juno;"
                elif artifact == "eclipse-plugin-kepler":
                    command=command+"mkdir -p " + DEST + "/eclipse-plugin/kepler;"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                     os.path.join(os.path.join(self.workerdir, buildername),
                                                 "build/scripts/org.*.zip") + \
                                     " " + DEST + "/eclipse-plugin/kepler;"
                elif artifact == "build-appliance":
                    command=command+"mkdir -p " + DEST + "/" + BA_PUBLISH_DIR + ";"
                    if self.layerversion_core is not None and int(self.layerversion_core) > 2:
                        command=command+"cp -R --no-dereference --preserve=links " + \
                                        os.path.join(self.basedir, "tmp/deploy/images/qemux86-64/*.zip") + \
                                        " " + DEST + "/" + BA_PUBLISH_DIR + ";"
                    else:
                        command=command+"cp -R --no-dereference --preserve=links " + \
                                        os.path.join(self.basedir, "tmp/deploy/images/*.zip") + \
                                        " " + DEST + "/" + BA_PUBLISH_DIR + ";"
                elif artifact == "buildtools-tarball":
                    command=command+"mkdir -p " + DEST + "/buildtools;"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    os.path.join(self.basedir, "tmp/deploy/sdk/*.sh") + \
                                    " " + DEST + "/buildtools;"
                elif artifact == "rpm":
                    command=command+"mkdir -p " + os.path.join(DEST, RPM_PUBLISH_DIR) + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    os.path.join(self.basedir, "tmp/deploy/rpm/* ") + \
                                    os.path.join(DEST, RPM_PUBLISH_DIR) + ";"
                elif artifact == "deb":
                    command=command+"mkdir -p " + os.path.join(DEST, DEB_PUBLISH_DIR) + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    os.path.join(self.basedir, "tmp/deploy/deb/* ") + \
                                    os.path.join(DEST, DEB_PUBLISH_DIR) + ";"
                elif artifact == "ipk":
                    command=command+"mkdir -p " + os.path.join(DEST, IPK_PUBLISH_DIR) + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    os.path.join(self.basedir, "tmp/deploy/ipk/* ") + \
                                    os.path.join(DEST, IPK_PUBLISH_DIR) + ";"
                elif artifact == "toolchain":
                    command=command+"mkdir -p " + os.path.join(DEST, X86TC_PUBLISH_DIR) + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    os.path.join(self.basedir, "tmp/deploy/sdk/poky-eglibc-i686* ") + \
                                    os.path.join(DEST, X86TC_PUBLISH_DIR) + ";"
                    command=command+"mkdir -p " + os.path.join(DEST, X8664TC_PUBLISH_DIR) + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    os.path.join(self.basedir, "tmp/deploy/sdk/poky-eglibc-x86_64* ") + \
                                    os.path.join(DEST, X8664TC_PUBLISH_DIR) + ";"
                elif artifact == "oe-toolchain":
                    command=command+"mkdir -p " + os.path.join(DEST, X86TC_PUBLISH_DIR) + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    os.path.join(self.basedir, "tmp/deploy/sdk/oecore-i686* ") + \
                                    os.path.join(DEST, X86TC_PUBLISH_DIR) + ";"
                    command=command+"mkdir -p " + os.path.join(DEST, X8664TC_PUBLISH_DIR) + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    os.path.join(self.basedir, "tmp/deploy/sdk/oecore-x86_64* ") + \
                                    os.path.join(DEST, X8664TC_PUBLISH_DIR) + ";"

                elif "qemu" in artifact:
                    artifact_name, deploy_image_dir = self.getDeployNames(artifact, buildername)
                    command=command+"mkdir -p " + DEST + "/" + QEMU_PUBLISH_DIR + "/" + artifact_name + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    deploy_image_dir + \
                                    "/*" + artifact + "* " + DEST + "/" + QEMU_PUBLISH_DIR + "/" + artifact_name + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    deploy_image_dir + \
                                    "/*.md5sum " + DEST + "/" + QEMU_PUBLISH_DIR + "/" + artifact_name + ";"
                elif "mpc8315e" in artifact:
                    artifact_name, deploy_image_dir = self.getDeployNames(artifact, buildername)
                    command=command+"mkdir -p " + DEST + "/" + MACHINE_PUBLISH_DIR + "/" + artifact_name + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    deploy_image_dir + \
                                    "/*mpc8315* " + DEST + "/" + MACHINE_PUBLISH_DIR + "/" + artifact_name + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    deploy_image_dir + \
                                    "/*.md5sum " + DEST + "/" + MACHINE_PUBLISH_DIR + "/" + artifact_name + ";"
                elif artifact == "tiny":
                    command=command+"mkdir -p " + DEST + "/" + QEMU_PUBLISH_DIR + "/qemu-tiny;"
                    if self.layerversion_core is not None and int(self.layerversion_core) > 2:
                        command=command+"cp -R --no-dereference --preserve=links " + \
                                        os.path.join(self.basedir, "tmp/deploy/images/qemux86/* ") + \
                                        " " + DEST + "/" + QEMU_PUBLISH_DIR + "/qemu-tiny;"
                    else:
                        command=command+"cp -R --no-dereference --preserve=links " + \
                                        os.path.join(self.basedir, "tmp/deploy/images/*") + \
                                        DEST + "/" + QEMU_PUBLISH_DIR + "/qemu-tiny;"
                elif artifact == "conf":
                    artifact_name, deploy_image_dir = self.getDeployNames(artifact, buildername)
                    command=command+"mkdir -p " + DEST + "/"+ MACHINE_PUBLISH_DIR + "/" + artifact_name + "/conf;"
                    command=command+"cp -R --no-dereference " + \
                                     os.path.join(self.basedir, "conf/") + \
                                     "/* " + DEST + "/" + MACHINE_PUBLISH_DIR + "/" + artifact_name + "/conf;"
                elif artifact == "md5sums":
                    artifact_name, deploy_image_dir = self.getDeployNames(artifact, buildername)
                    command = command + "for x in `find " + deploy_image_dir + " -type f`; do "
                    command = command + "md5sum $x >> $x.md5sum; done;"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                     deploy_image_dir + \
                                    "/*.md5sum " + DEST + "/" + MACHINE_PUBLISH_DIR + "/" + artifact_name + ";"

                elif artifact == "None":
                    command=command+"echo 'Skipping copy of " + artifact + ".'"
                else:
                    artifact_name, deploy_image_dir = self.getDeployNames(artifact, buildername)
                    self.layerversion_yoctobsp = self.getProperty("layerversion_yoctobsp")
                    if self.layerversion_yoctobsp is not None and \
                       int(self.layerversion_yoctobsp) < 2 and \
                       "genericx86-64" in artifact:
                        command = command+"echo 'Skipping copy of genericx86-64.'; "
                    else:
                        command=command+"mkdir -p " + DEST + "/"+ MACHINE_PUBLISH_DIR +"/" + artifact_name + ";"
                        if "beagle" in artifact:
                            command=command+"cp -R --no-dereference --preserve=links " + \
                                             deploy_image_dir + \
                                             "/*Image* " + DEST + "/" + MACHINE_PUBLISH_DIR +"/" + artifact_name + ";"
                            command=command+"cp -R --no-dereference --preserve=links " + \
                                             deploy_image_dir + \
                                             "/u-boot* " + DEST + "/" + MACHINE_PUBLISH_DIR +"/" + artifact_name + ";"
                        command=command+"cp -R --no-dereference --preserve=links " + \
                                         deploy_image_dir + \
                                         "/*"+artifact+"* " + DEST + "/" + MACHINE_PUBLISH_DIR +"/" + artifact_name + ";"

            self.command = command
        else:
            self.command = "echo 'Skipping Step.'"
        ShellCommand.start(self)

    def getDeployNames(self, artifact, buildername):
        artifact_name = artifact
        if "-lsb" in buildername:
            artifact_name = artifact_name + "-lsb"
        if self.layerversion_core is not None and int(self.layerversion_core) > 2:
            deploy_dir_image = os.path.join(os.path.join(self.basedir, "tmp/deploy/images/"), artifact)
        else:
            deploy_dir_image = os.path.join(self.basedir, "tmp/deploy/images/")
        return artifact_name, deploy_dir_image

    def describe(self, done=False):
        description = ShellCommand.describe(self,done)
        return description

