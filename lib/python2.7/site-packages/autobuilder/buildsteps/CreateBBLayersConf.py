'''
Created on Dec 26, 2012

__author__ = "Elizabeth 'pidge' Flanagan"
__copyright__ = "Copyright 2013, Intel Corp."
__credits__ = ["Elizabeth Flanagan"]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Elizabeth Flanagan"
__email__ = "elizabeth.flanagan@intel.com"
'''

from buildbot.steps.shell import ShellCommand
from twisted.python import log

class CreateBBLayersConf(ShellCommand):
    """
    Build step to create the bblayers.conf file which is used 
    by bitbake to know where the necessary layers are found.
    """
    haltOnFailure = False
    flunkOnFailure = True
    name = "Create BBLayers Configuration"
    def __init__(self, factory, layers, argdict=None, **kwargs):
        """
        argdict contents:
            "buildprovider": string - choose between oe and yocto
            "bsplayer": bool - board support package layer
            "bspprovider": string - bsplayer suboption
            "x32abi": bool - buildprovider suboption
            "bbtext": string - add text to file
            "bbtextprepend": string - add text to beginning of file
            "bbtextappend": string - add text to end of file
            "layerdirs": [string] - list of layer directories
        """

        self.factory = factory
        self.layers=layers
        self.buildprovider="yocto"
        self.bsplayer=False
        self.bspprovider=""
        self.x32abi=False
        self.bbtext=""
        self.bbtextprepend=""
        self.bbtextappend=""
        self.layerdirs=""
        for k, v in argdict.iteritems():
            setattr(self, k, v)
        self.description = "Create BBLayers Configuration"
        ShellCommand.__init__(self, **kwargs)

    def start(self):
        import os
        fout = ""
        buildername=self.getProperty("buildername")
        branch=self.getProperty("branch")
        workdir=self.getProperty("workdir")
        #check to see if we have a prepend
        if self.bbtextprepend != "":
            fout = fout + self.bbtextprepend
        #check to see if we have text override
        if self.bbtext != "":
            fout = fout+self.bbtext
        fout = fout + 'LCONF_VERSION = <LCONF> \n'
        fout = fout + 'BBPATH = "${TOPDIR}" \n'
        fout = fout + 'BBFILES ?="" \n'
        fout = fout + 'BBLAYERS += " \ \n'
        if self.buildprovider == "yocto":
            fout = fout + workdir + "/build/meta \ \n"
            fout = fout + workdir + "/build/meta-yocto \ \n"
            fout = fout + workdir + "/build/meta-yocto-bsp \ \n"
            if self.x32abi == True:
                fout = fout + workdir + '/build/meta-x32 \ \n'
        elif self.buildprovider == "oe":
            fout = fout + workdir + "/build/meta \ \n"
        if self.bsplayer == True:
            if self.bspprovider == "intel":
                if list(self.layerdirs):
                    for layer in self.layerdirs:
                        fout = fout + workdir + '/build/' + layer + ' \ \n'
                else:
                    fout = fout + workdir + '/build/meta-intel \ \n'
                    fout = fout + workdir + '/build/meta-intel/meta-' + buildername.replace("-server", "").replace("-gladden", "").replace("-noemgd", "").replace("-lsb", "") + ' \ \n'
                    fout = fout + workdir + '/build/meta-intel/meta-tlk \ \n'
            elif self.bspprovider == "fsl-ppc":
                fout = fout + workdir + '/build/meta-fsl-ppc \ \n'
            elif self.bspprovider == "fsl-arm":
                fout = fout + workdir + '/build/meta-fsl-arm \ \n'
        elif self.bsplayer == False and list(self.layerdirs):
            for layer in self.layerdirs:
                fout = fout + workdir + '/build/' + layer + ' \ \n'
        for layer in self.layers:
            if layer.iterkeys().next()=="meta-qt3":
                fout = fout + workdir + '/build/meta-qt3 \ \n'
        fout = fout + '" \n'
        if self.bbtextappend != "":
            fout = fout + self.bbtextappend
        self.command = "LCONF=`cat ./build/conf/bblayers.conf| grep \"LCONF_VERSION =\"|cut -d'=' -f2`; rm -rf ./build/conf/bblayers.conf; echo '" +  fout + "'>> ./build/conf/bblayers.conf; sed -i \"s/<LCONF>/$LCONF/\" ./build/conf/bblayers.conf"
        self.setProperty("BBLAYERS", fout)
        ShellCommand.start(self)

    def describe(self, done=False):
        description = ShellCommand.describe(self,done)
        return description
