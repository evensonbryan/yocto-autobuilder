'''
Created on March 18th, 2014
__author__ = "Elizabeth 'pidge' Flanagan"
__copyright__ = "Copyright 2013, Intel Corp."
__credits__ = ["Elizabeth Flanagan"]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Elizabeth Flanagan"
__email__ = "elizabeth.flanagan@intel.com"
'''
from buildbot.process.buildstep import BuildStep, LoggingBuildStep
from buildbot.process.build import Build
from buildbot.status.results import SUCCESS
from buildbot.process.properties import WithProperties
from twisted.python import log
from autobuilder.config import *

class CheckBSPExists(LoggingBuildStep):
    """
    Class to check if a BSP still exists and stop the build if it does not.
    """
    haltOnFailure = False
    flunkOnFailure = False
    name = "Check BSP Exists"
    def __init__(self, factory, argdict=None, **kwargs):
        """
        argdict contents:
            N/A
        """
        self.description = "Check if BSP Exists"
        self.layerversion_intel = None
        self.buildername = None
        for k, v in argdict.iteritems():
            setattr(self, k, v)
        LoggingBuildStep.__init__(self, **kwargs)

    def start(self):
        # layerversion_metaintel values:
        # 1: removed: chiefriver
        #            sys940x
        #            n450
        self.layerversion_intel = self.getProperty("layerversion_intel")
        self.buildername = self.getProperty("buildername")
        if 'n450' in self.buildername or 'chiefriver' in self.buildername or \
           'sys940' in self.buildername:
            if self.layerversion_intel is not None and \
               self.layerversion_intel  > "1":
                self.finished(SUCCESS)
                self.build.stopBuild('STOPPED!')
            else: 
                self.finished(SUCCESS)
        else:
            self.finished(SUCCESS)

    def describe(self, done=False):
        description = LoggingBuildStep.describe(self, done)
        if self.layerversion_intel is not None and self > "1":
            description = "This BSP exists in the branch. Building."
        else:
            description = "This BSP does not exists in the branch. Skipping."
        return description
