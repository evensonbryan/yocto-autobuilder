'''
Created on Sept 17th, 2013
__author__ = "Elizabeth 'pidge' Flanagan"
__copyright__ = "Copyright 2013, Intel Corp."
__credits__ = ["Elizabeth Flanagan"]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Elizabeth Flanagan"
__email__ = "elizabeth.flanagan@intel.com"
'''
from buildbot.steps.shell import ShellCommand
from buildbot.status import progress
from buildbot.process.build import Build
from buildbot.status.results import SUCCESS
from buildbot.process.properties import WithProperties
from twisted.python import log
from autobuilder.config import *

class ResolveLayerHead(ShellCommand):
    """
    Build step to get the git commit hash of the layer head and sets the corresponding properties.
    """
    haltOnFailure = False
    flunkOnFailure = False
    name = "ResolveLayerHead"
    def __init__(self, factory, layername=None, scheduler=None, argdict=None, **kwargs):
        """
        argdict contents:
            N/A
        """
        self.branch = ""
        self.commit = ""
        self.repourl = ""
        self.layername = layername
        self.scheduler = scheduler
        self.description = "Resolve " + self.layername + " " + self.branch + " HEAD"
        for k, v in argdict.iteritems():
            setattr(self, k, v)
        ShellCommand.__init__(self, **kwargs)

    def start(self):
        if self.getProperty('branch_'+self.layername):
            self.branch = self.getProperty('branch_'+self.layername)
        else:
            self.branch = "master"

        if self.getProperty('repo_'+self.layername):
            self.repourl = self.getProperty('repo_'+self.layername)
        else:
            self.repourl = "git://git.yoctoproject.org/poky"

        if self.getProperty('commit_'+self.layername) is 'HEAD' and  self.getProperty('commit_resolvedhead_'+self.layername) is not None:
            self.commit = self.getProperty('commit_resolvedhead_'+self.layername)
        else:
            self.commit = self.getProperty('commit_' + self.layername)
        if self.commit == "HEAD":
            cmd = 'git ls-remote ' + self.repourl + ' refs/heads/' + self.branch + '|cut -f1'
        elif self.commit is not None:
            cmd = 'echo ' + self.commit
        else:
            self.finished(SUCCESS)
            self.build.stopBuild('STOPPED!')

        self.command = cmd
        ShellCommand.start(self)

    def commandComplete(self, cmd):
        result = cmd.logs['stdio'].getText()
        githash= result.strip()
        if cmd.didFail():
           githash = self.commit
        self.setProperty('commit_resolvedhead_'+self.layername, githash, "Setting Layer Version")
        self.setProperty('commit_'+self.layername, githash, "Setting Layer Version")
        log.msg("Setting hash for " + self.layername + " " + self.repourl + " to " + githash)
        self.finished(SUCCESS)

    def getText(self, cmd, results):
        return ShellCommand.getText(self, cmd, results)
